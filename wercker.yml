box: 
  id: node:latest
  ports: 
    - "8080"
    
dev:
  steps:
    - npm-install
    - internal/watch:
        code: node app.js
        reload: true

# Build definition
build:
  # The steps that will be executed on build
  steps:
    - script:
        code: export NODE_ENV='testing'
    # A step that executes `npm install` command
    - npm-install
    # A step that executes `npm test` command
    - npm-test

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"

deploy:
  # push to registry
  steps:
  #   - internal/docker-push:
  #       username: $USERNAME
  #       password: $PASSWORD
  #       tag: latest
  #       repository: $DOCKER_REPO
  #       registry: https://phx.ocir.io/v2/
  #       ports: "8080"
  #       cmd: npm start
  #       working-dir: $WERCKER_ROOT

    # deploy app to OKE
    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv helloworld-*.yaml $WERCKER_OUTPUT_DIR/kubernetes
    
    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - kubectl:
        name: deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/

    # wait 10 seconds
    - script:
        name: Wait for deployment to exist
        code: sleep 10

    # Tell Kubernetes that we're going to wait 60 seconds for the deploy to be successful
    # - kubectl:
    #     name: set deployment timeout
    #     server: $OKE_MASTER
    #     token: $OKE_TOKEN
    #     insecure-skip-tls-verify: true
    #     command: patch deployment/helloworld -p '{"spec":{"progressDeadlineSeconds":60}}'

    # Watch the Kubernetes deployment. Once the pods are considered healthy the step will exit 0
    # If they aren't healthy within 60 seconds, it will exit with a non 0 exit code, and cause the run to fail.
    - kubectl:
        name: check deployment status
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: rollout status deployment/helloworld

